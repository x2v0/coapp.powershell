// universal configuration pivots.

configurations {
    Toolsets { 
        key : "PlatformToolset"; 
        choices: {  v143, v142, v140, v120, v110, v100, v90, v80, v71, v70, v60, gcc, v110_xp, v110_wp80, v120_xp, v120_wp80,  v120_wp81, v140_xp, v140_wp80,  v140_wp81 };  

        v110_wp80 { 
            accept : { x86, arm, WindowsPhone8 };

            isInstalled : { 
                FileExists="c:\invalid_file.xyz";
            };
        };

        v110_xp { 
            accept : { Win32, x64, Desktop };

            isInstalled : { 
                FileExists="c:\invalid_file.xyz";
            };
        };

        v120_wp80 { 
            accept : { x86, arm, WindowsPhone8 };

            isInstalled : { 
                FileExists="c:\invalid_file.xyz";
            };
        };
        
        
        v120_wp81 { 
            accept : { x86, arm, WindowsPhone8 };

            isInstalled : { 
                FileExists="c:\invalid_file.xyz";
            };
        };

        v120_xp { 
            accept : { Win32, x64, Desktop };

            isInstalled : { 
                FileExists="c:\invalid_file.xyz";
            };
        };



        v140_wp80 { 
            accept : { x86, arm, WindowsPhone8 };

            isInstalled : { 
                FileExists="c:\invalid_file.xyz";
            };
        };
        
        
        v140_wp81 { 
            accept : { x86, arm, WindowsPhone8 };

            isInstalled : { 
                FileExists="c:\invalid_file.xyz";
            };
        };

        v140_xp { 
            accept : { Win32, x64, Desktop };

            isInstalled : { 
                FileExists="c:\invalid_file.xyz";
            };
        };



        gcc { 
            accept : { Win32, x64, Desktop };

            isInstalled : { 
                FileExists="c:\invalid_file.xyz";
            };
        };

        v60 { 
            accept : { Win32, Desktop };

            isInstalled : { 
                FileExists="c:\invalid_file.xyz";
            };
        };

        v70 { 
            accept : { Win32, Desktop };

            isInstalled : { 
                FileExists="c:\invalid_file.xyz";
            };
        };

        v71 { 
            accept : { Win32, x64, Desktop };

            isInstalled : { 
                FileExists="c:\invalid_file.xyz";
            };
        };

        v80 { 
            accept : { Win32, x64, Desktop };

            isInstalled : { 
                FileExists="c:\invalid_file.xyz";
            };
        };

        v90 { 
            accept : { Win32, x64, Desktop };

            isInstalled : { 
                FileExists="c:\invalid_file.xyz";
            };
        };

        v100 {
            accept : { Win32, x64, Desktop };

            isInstalled : { 
                FileExists="C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat";
            };

            activate {  // generates an 'activate_v100' Target when used from the invoke-build cmdlet.
                .GetEnvironmentFromBatchFile { 
                    BatchFile="C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat";
                    Parameters="${Platform}";
                };
            };
        };

        v110 {
            // We're normalizing out the concept of the v110 platform -- Overloading the $(PlatformToolset) variable for additional pivots was a dumb idea.
            condition = "( '$(PlatformToolset.ToLower())' == 'v110' Or '$(PlatformToolset.ToLower())' == 'windowskernelmodedriver8.0' Or '$(PlatformToolset.ToLower())' == 'windowsapplicationfordrivers8.0' Or '$(PlatformToolset.ToLower())' == 'windowsusermodedriver8.0' )";
            deny : { AnyCPU  };

            isInstalled : { 
                FileExists="C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\vcvarsall.bat";
            };

            activate {  
                .GetEnvironmentFromBatchFile { 
                    BatchFile="C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\vcvarsall.bat";
                    Parameters=${Platform}; //.Replace(arm,x86_arm)
                };
            };
        };

        v120 {
            // We're normalizing out the concept of the v120 platform -- Overloading the $(PlatformToolset) variable for additional pivots was a dumb idea.
            condition = "( '$(PlatformToolset.ToLower())' == 'v120' Or '$(PlatformToolset.ToLower())' == 'windowskernelmodedriver8.0' Or '$(PlatformToolset.ToLower())' == 'windowsapplicationfordrivers8.0' Or '$(PlatformToolset.ToLower())' == 'windowsusermodedriver8.0' )";
            deny : { AnyCPU };

            isInstalled : { 
                FileExists="C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall.bat";
            };

            activate {  
                .GetEnvironmentFromBatchFile { 
                    BatchFile="C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall.bat";
                    Parameters=${Platform}; //.Replace(arm,x86_arm)
                };
            };
        };

        v140 {
            // We're normalizing out the concept of the v140 platform -- Overloading the $(PlatformToolset) variable for additional pivots was a dumb idea.
            condition = "( '$(PlatformToolset.ToLower())' == 'v140' Or '$(PlatformToolset.ToLower())' == 'windowskernelmodedriver8' Or '$(PlatformToolset.ToLower())' == 'windowsapplicationfordrivers8' Or '$(PlatformToolset.ToLower())' == 'windowsusermodedriver8' )";
            deny : { AnyCPU };

            isInstalled : { 
                FileExists="C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat";
            };

            activate {  
                .GetEnvironmentFromBatchFile { 
                    BatchFile="C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat";
                    Parameters=${Platform}; //.Replace(arm,x86_arm)
                };
            };
        };
            
    };
 
    Platforms {
        key : "Platform"; 
        choices: { Win32, x64, ARM, AnyCPU };
        Win32 { 
            aliases : { x86, win32, ia32, 386 }; 
        };

        x64 {
            aliases : { x64, amd64, em64t, intel64, x86-64, x86_64 };
            accept: { cdecl, vectorcall };
        };
         
        ARM { 
            aliases : { arm, woa  };
            accept : { cdecl };
        };

        AnyCPU {
            aliases : { anycpu, any };
        };
    };

    Configurations {
        key : "Configuration"; 
        choices: { Release, Debug };

        Release { 
            condition = "( $(Configuration.ToLower().IndexOf('debug')) == -1 )";
        };

        Debug { 
            condition = "( $(Configuration.ToLower().IndexOf('debug')) > -1 )";
        };
    };
    
    Linkages { 
        choices : { dynamic, static, ltcg, sxs };
        description = "Which version of the .lib file to link to this library";

        ltcg { 
            description = "Link Time Compiler Generation";
        };

        dynamic { 
            description = "Dynamic Library (DLL)";
        };

        static { 
            description = "Static";
        };

        sxs { 
            description = "Side-by-Side";
        };

    };

    // Only really applicable to x86
    CallingConventions {
        choices : { cdecl, stdcall, fastcall, thiscall, clrcall, vectorcall };
        description = "Calling convention model to use";

        cdecl { 
            description = "cdecl";
        };

        stdcall { 
            description = "stdcall (Uncommon)";
            accept: { Win32 };
        };

        fastcall { 
            description = "fastcall (Rare)";
            accept: { Win32 };
        };

        thiscall { 
            description = "thiscall (Rare)";
            accept: { Win32 };
        };

        clrcall { 
            description = "clrcall (Rare)";
            accept: { Win32 };
        };

        vectorcall { 
            accept: { v120, x64, x86 };
        }
    };

    CharacterSets { 
        key : "CharacterSet"; 
        choices: {  MultiByte, Unicode };
    };

    /* 
        Since the MSBuild  property for identifying if a project is compiling a Win8 Store App
        is a boolean, and we don't want to actually key off that, we're going to generate 
        a property that gets a value based on that boolean, and key off of that.
        
        We'll declare that property in the props file (so that it happens early in the MSBuild)
        (see the props section down near the bottom)
    */

    TargetApplicationTypes {
        key: "TargetApplicationType";
        
        choices: { Desktop,  WinRT, Phone8, KernelModeDriver, ApplicationForDriver, UserModeDriver }; // "WindowsKernelModeDriver8.0", "WindowsApplicationForDrivers8.0", "WindowsUserModeDriver8.0" 
        
        #defines {
            // we are going to define the conditions here
            // so that we can reuse them to detect 'desktop', since it's the absence 
            // of all others, and I don't want to accidentally make a copy/paste error.

            KernelModeDriver_condition = "('$(PlatformToolset.ToLower())' == 'windowskernelmodedriver8.0')";
            ApplicationForDriver_condition = "('$(PlatformToolset.ToLower())' == 'windowsapplicationfordrivers8.0')";
            UserModeDriver_condition = "('$(PlatformToolset.ToLower())' == 'windowsusermodedriver8.0')";

            Phone8_condition = "('$(TargetPlatformIdentifier.ToLower())' == 'windows phone' And '$(TargetPlatformVersion)' >= '8.0')";
            WinRT_condition = "('$(AppContainerApplication.ToLower())' == 'true')";
            Desktop_condition =  "( !${KernelModeDriver_condition} And !${ApplicationForDriver_condition} And !${UserModeDriver_condition} And !${Phone8_condition} And !${WinRT_condition} )";
        }

        Desktop {
            aliases : { Desktop, NotWinRT };
            condition =  ${Desktop_condition};
        };

        WinRT {
            aliases : { WinRT, Metro, Modern };
            condition = ${WinRT_condition};
            accept : { v140, v120, v110 };
        };

        Phone8 {
            aliases : { Phone8, Phone, WindowsPhone };
            condition = ${Phone8_condition};
            accept : { v140, v120, v110 };
        };
        
        KernelModeDriver {
            aliases : { KernelModeDriver, Kernel, KernelDriver ,Driver };
            condition = ${KernelModeDriver_condition};
            accept : { v140, v120, v110 };
        };

        ApplicationForDriver { 
            aliases : { ApplicationForDriver };
            condition = ${ApplicationForDriver_condition};
            accept : { v140, v120, v110 };
        };

        UserModeDriver {
            aliases  : { UserModeDriver, UserMode, UserDriver };
            condition = ${UserModeDriver_condition};
            accept : { v140, v120, v110 };
        };

    }
}
